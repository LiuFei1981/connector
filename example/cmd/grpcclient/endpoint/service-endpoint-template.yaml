#
# NOTE: the actual endpoint-1.yaml need to be edited from this yaml template before client example will work
#

#
# client side yaml is defined per each service target
# client side yaml is to be located with /endpoint and named after service it targets
#
target:
  # required, this client app's name
  app_name: connector.client
  # required, defines target service discovery method
  # valid values: srv, a, api, direct
  service_discovery_type: "srv"
  # if service_discovery_type = direct
  # specify a direct ip and port (###.###.###.###:####) to directly connect
  # (direct connect is intended for testing use only, do not use for production)
  direct_connect_ip_port: ""
  # if service_discovery_type = srv, a or api
  # target service name as registered with aws cloud map
  # both service_name and namespace_name are required when srv, a or api
  service_name: ""
  # if service_discovery_type = srv, a or api
  # target namespace name as registered with aws cloud map
  # both service_name and namespace_name are required when srv, a or api
  namespace_name: ""
  # if service_discovery_type = api
  # target service's aws region, must be valid aws regions supported
  # (us-east-1, us-west-2, etc, see github.com/aldelo/common/wrapper/aws/awsregion)
  # region is required when api
  region: us-east-1
  # if service_discovery_type = api
  # target instance filter to given version only (optional)
  instance_version: ""
  # if service_discovery_type = a
  # indicates a specific port being used on service endpoint when sd = a
  # 0 means do not use fixed port, honor service discovery port returned instead
  instance_port: 0
  # timeout seconds for service discovery actions, 0 to turn off timeout
  sd_timeout: 5
  # service discovery endpoints cache expires seconds, 0 defaults to 300 seconds
  sd_endpoint_cache_expires: 300
  # service discovery api maximum instance count returned during discovery call, 0 defaults to 100
  sd_instance_max_result: 100
  # option to enable or disable aws xray tracing for this client, default is false
  trace_use_xray: false
  # option to enable or disable zap log, default is false
  zaplog_enabled: true
  # option to output zap log to console (screen), true = console, false = file, default = true
  zaplog_output_console: true
  # optional, self-signed ca certs file path, separated by comma if multiple ca pems,
  # used by rest get/post/put/delete against target server hosts that use self-signed certs for tls, to avoid bad certificate error during tls handshake
  rest_target_ca_cert_files:
queues:
  # the queue url pre-created on aws sqs for the target logger service to use
  sqs_logger_queue_url:
topics:
  # the topic arn pre-created on aws sns for the target discovery service to be used by notifierClient
  # WARNING: discovery topic is used ONLY BY xyz-notifier-client.yaml
  sns_discovery_topic_arn:
grpc:
  # dial grpc in blocking mode if true, otherwise, non-blocking, default is blocking mode
  dial_blocking_mode: true
  # for server TLS or mTLS setup, one or more server CA cert path to pem file, multiple files separated by comma
  server_ca_cert_files: ""
  # for mTLS setup, the client certificate pem file path
  client_cert_file: ""
  # for mTLS setup, the client certificate key file path
  client_key_file: ""
  # define user agent string for all RPCs
  user_agent: ""
  # indicates round robin load balancer is to be used, default is true
  use_load_balancer: true
  # indicates health check for server serving status is enabled, default is true
  use_health_check: true
  # indicates the minimum connect timeout seconds for the dial action
  dial_min_connect_timeout: 5
  # grpc keep-alive option,
  # max seconds of no activity before client pings server, 0 for default of 30 seconds
  keepalive_inactive_ping_time_trigger: 0
  # grpc keep-alive option,
  # max seconds of timeout during client to server ping, where no response closes connection, 0 for default of 20 seconds
  keepalive_inactive_ping_timeout: 0
  # grpc keep-alive enforcement policy,
  # allow client to keepalive if no stream, false is default
  keepalive_permit_without_stream: false
  # 0 for default 32 kb = 1024 * 32
  read_buffer_size: 0
  # 0 for default 32 kb = 1024 * 32
  write_buffer_size: 0
  # indicates if circuit breaker is enabled, default is false
  circuit_breaker_enabled: false
  # how long to wait for command to complete, in milliseconds, default = 1000
  circuit_breaker_timeout: 1000
  # how many commands of the same type can run at the same time, default = 10
  circuit_breaker_max_concurrent_requests: 10
  # minimum number of requests needed before a circuit can be tripped due to health, default = 20
  circuit_breaker_request_volume_threshold: 20
  # how long to wait after a circuit opens before testing for recovery, in milliseconds, default = 5000
  circuit_breaker_sleep_window: 5000
  # causes circuits to open once the rolling measure of errors exceeds this percent of requests, default = 50
  circuit_breaker_error_percent_threshold: 50
  # indicates the logger that will be used to log circuit breaker activities
  circuit_breaker_logger_enabled: true