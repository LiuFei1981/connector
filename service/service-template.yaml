target:
  # required, app being created, be service specific
  app_name: connector.service
  # must be valid aws regions supported
  # (us-east-1, us-west-2, etc, see github.com/aldelo/common/wrapper/aws/awsregion)
  region: us-east-1
namespace:
  # from aws cloud map namespace - must be pre-created first
  ns_id:
  # from aws cloud map namespace - must be pre-created first
  ns_name:
service:
  # from aws cloud map or leave blank for auto creation
  sv_id:
  # from aws cloud map or leave blank for auto creation
  sv_name:
service_auto_create:
  # value to use for auto service creation, srv or a
  sac_dns_type: srv
  # value to use for auto service creation, multivalue or weighted
  sac_dns_routing: multivalue
  # value to use for auto service creation, in seconds
  sac_dns_ttl: 90
  # value to use for auto service creation, true or false
  sac_health_custom: true
  # value to use for auto service creation, uint
  sac_health_failthreshold: 1
  # value to use for auto service creation, http, https, or tcp
  sac_health_pubdns_type: ""
  # value to use for auto service creation, http or https health check resource path
  sac_health_pubdns_path: ""
instance:
  # instance id creation prefix, leave blank if no prefix
  instance_prefix: ams-
  # instance launch tcp port, leave 0 as dynamic
  instance_port: 0
  # instance classification, vx.x.x style
  instance_version: v0.0.1
  # instance launch initial health state when registered, true or false
  initial_unhealthy: true
  # service discovery actions timeout seconds (for cloudmap register, health update, deregister)
  sd_timeout: 5
  # instance internal grpc health check frequency in seconds
  internal_health_frequency: 1
  # instance id currently launched
  instance_id: ""
grpc:
  # grpc connection attempt time out in seconds, 0 for default of 120 seconds
  connection_timeout: 15
  # grpc tls setup, path to cert pem file
  x509_cert_file: ""
  # grpc tls setup, path to key pem file
  x509_key_file: ""
  # grpc keep-alive enforcement policy,
  # minimum seconds before client may send keepalive, 0 for default 300 seconds
  keepalive_min_wait: 0
  # grpc keep-alive enforcement policy,
  # allow client to keepalive if no stream, false is default
  keepalive_permit_without_stream: false
  # grpc keep-alive option,
  # max seconds before idle connect is closed, 0 for default of infinity
  keepalive_max_conn_idle: 0
  # grpc keep-alive option,
  # max seconds a connection may exist before closed, 0 for default of infinity
  keepalive_max_conn_age: 0
  # grpc keep-alive option,
  # max seconds added to max_conn_age to forcefully close, 0 for default of infinity
  keepalive_max_conn_age_grace: 0
  # grpc keep-alive option,
  # max seconds of no activity before server pings client, 0 for default of 2 hours
  keepalive_inactive_ping_time_trigger: 0
  # grpc keep-alive option,
  # max seconds of timeout during server to client ping, where no response closes connection, 0 for default of 20 seconds
  keepalive_inactive_ping_timeout: 0
  # 0 for default 32 kb = 1024 * 32
  read_buffer_size: 0
  # 0 for default 32 kb = 1024 * 32
  write_buffer_size: 0
  # 0 for default 4 mb = 1024 * 1024 * 4, maximum bytes allowed to receive from client
  max_recv_msg_size: 0
  # 0 for default maxInt32, maximum bytes allowed to send to client
  max_send_msg_size: 0
  # defines maximum concurrent streams server will handle,
  # 0 for http2 transport default value of 250
  max_concurrent_streams: 0
  # defines max of stream workers rather than new goroutine per stream,
  # 0 for default of new per routine, if > 0, match to cpu core count for most performant
  num_stream_workers: 0





