target:
  # required, app being created, be service specific
  app_name: connector.service
  # must be valid aws regions supported
  # (us-east-1, us-west-2, etc, see github.com/aldelo/common/wrapper/aws/awsregion)
  region: us-east-1
namespace:
  # from aws cloud map namespace - must be pre-created first
  ns_id:
  # from aws cloud map namespace - must be pre-created first
  ns_name:
service:
  # from aws cloud map or leave blank for auto creation
  sv_id:
  # from aws cloud map or leave blank for auto creation,
  # if blank, will use AppName or target.app_name as default value, or set it as the actual name desired
  sv_name:
  # indicate if this service will use sqs and sns for service discovery, default = false
  sv_discovery_use_sqs_sns: false
  # indicate if this service will use aws xray for tracing, default = false
  sv_tracer_use_xray: false
  # indicate if this service will use sqs for service logging staging, default = false
  sv_logger_use_sqs: false
  # optional, self-signed ca certs file path, separated by comma if multiple ca pems,
  # used by rest get/post/put/delete against target server hosts that use self-signed certs for tls, to avoid bad certificate error during tls handshake
  rest_target_ca_cert_files:
queues:
  # sqs queue name prefix used for service discovery data queuing, if name is not provided, default = service-discovery-data-
  sqs_discovery_queue_name_prefix:
  # sqs service discovery queue's messages retention seconds, default = 300 seconds (5 Minutes)
  sqs_discovery_message_retention_seconds: 300
  # sqs queue's queueUrl and queueArn as generated by aws sqs for the corresponding service discovery data queue used by this service (auto set by service upon creation)
  sqs_discovery_queue_url:
  sqs_discovery_queue_arn:
  # sqs queue name prefix used for service logging data queuing, if name is not provided, default = service-logger-data-
  sqs_logger_queue_name_prefix:
  # sqs service logger queue's messages retention seconds, default = 14,400 seconds (4 Hours)
  sqs_logger_message_retention_seconds: 14400
  # sqs queue's queueUrl and queueArn as generated by aws sqs for the corresponding service logger data queue used by this service (auto set by service upon creation)
  sqs_logger_queue_url:
  sqs_logger_queue_arn:
topics:
  # sns topic name prefix used for discovery data notification, if name is not provided, default = service-discovery-notify-
  sns_discovery_topic_name_prefix:
  # sns topic's topicArn as generated by aws sns for the corresponding service discovery topic used by this service (auto set by service upon creation)
  sns_discovery_topic_arn:
  # sns topic subscription arn as generated by aws during subscribe event
  sns_discovery_subscription_arn:
service_auto_create:
  # value to use for auto service creation, srv or a
  sac_dns_type: srv
  # value to use for auto service creation, multivalue or weighted
  sac_dns_routing: multivalue
  # value to use for auto service creation, in seconds
  sac_dns_ttl: 90
  # value to use for auto service creation, true or false
  sac_health_custom: true
  # value to use for auto service creation, uint
  sac_health_failthreshold: 1
  # value to use for auto service creation, http, https, or tcp
  sac_health_pubdns_type: ""
  # value to use for auto service creation, http or https health check resource path
  sac_health_pubdns_path: ""
instance:
  # instance id creation prefix, leave blank if no prefix
  instance_prefix: ams-
  # instance favor public ip when possible, will contact snsgateway callerid service to request public ip if available
  # warning: if favor public ip = true, but public ip fail to obtain, service launch will stop
  # warning: if grpc service is deployed inside AWS, using public ip will cause security group to require IP of source/target rather than using defined security groups
  instance_favor_public_ip: false
  # full url path including http or https to the gateway service that providers public ip discovery, typically this is the endpoint pointing to snsgateway services
  # warning: required if favor public ip = true, but public ip fail to obtain, service launch will stop
  public_ip_discovery_gateway:
  # gateway validation key used by public ip discovery gateway, this is a required field if the public_ip_discovery_gateway is set
  # warning: required if favor public ip = true, but public ip fail to obtain, service launch will stop
  public_ip_gateway_key:
  # instance launch tcp port, leave 0 as dynamic
  instance_port: 0
  # instance classification, vx.x.x style
  instance_version: v0.0.1
  # instance launch initial health state when registered, true or false
  initial_unhealthy: true
  # service discovery actions timeout seconds (for cloudmap register, health update, deregister)
  sd_timeout: 5
  # instance internal grpc health check frequency in seconds
  internal_health_frequency: 1
  # instance id currently launched
  instance_id: ""
  # automatically deregister prior instance id if found during launch
  auto_deregister_prior: true
  # rest api url full path to the healthreport controller, for service to report its live status, the service host will periodically retire inactive services > 15 minutes of no keepalive report
  health_report_service_url: ""
  # frequency of health report update via calling health_report_service_url, minimum 30 seconds, default 120 seconds, maximum 300 seconds, 0 = 120
  health_report_update_frequency_seconds: 120
  # hash key name is the identifier name used by service when performing health report
  # hash key name can be any alphanumeric string value, on the health monitor side, this name is used as lookup for the actual key
  hash_key_name: ""
  # hash key secret is the actual hash key secret value used by this service, to hash (digitally sign) a set of values
  # the host side will also have this hash key, while the hash key name is used as lookup between the packet transfer, without disclosing the hash key secret
  hash_key_secret: ""
grpc:
  # grpc connection attempt time out in seconds, 0 for default of 120 seconds
  connection_timeout: 15
  # grpc tls setup, path to cert pem file
  server_cert_file: ""
  # grpc tls setup, path to key pem file
  server_key_file: ""
  # for mTLS setup, one or more client CA cert path to pem file, multiple files separated by comma
  client_ca_cert_files: ""
  # grpc keep-alive enforcement policy,
  # minimum seconds before client may send keepalive, 0 for default 15 seconds
  keepalive_min_wait: 0
  # grpc keep-alive enforcement policy,
  # allow client to keepalive if no stream, false is default
  keepalive_permit_without_stream: false
  # grpc keep-alive option,
  # max seconds before idle connect is closed, 0 for default of infinity
  keepalive_max_conn_idle: 0
  # grpc keep-alive option,
  # max seconds a connection may exist before closed, 0 for default of infinity
  keepalive_max_conn_age: 0
  # grpc keep-alive option,
  # max seconds added to max_conn_age to forcefully close, 0 for default of infinity
  keepalive_max_conn_age_grace: 0
  # grpc keep-alive option,
  # max seconds of no activity before server pings client, 0 for default of 2 hours
  keepalive_inactive_ping_time_trigger: 0
  # grpc keep-alive option,
  # max seconds of timeout during server to client ping, where no response closes connection, 0 for default of 20 seconds
  keepalive_inactive_ping_timeout: 0
  # 0 for default 32 kb = 1024 * 32
  read_buffer_size: 0
  # 0 for default 32 kb = 1024 * 32
  write_buffer_size: 0
  # 0 for default 4 mb = 1024 * 1024 * 4, maximum bytes allowed to receive from client
  max_recv_msg_size: 0
  # 0 for default maxInt32, maximum bytes allowed to send to client
  max_send_msg_size: 0
  # defines maximum concurrent streams server will handle,
  # 0 for http2 transport default value of 250
  max_concurrent_streams: 0
  # defines max of stream workers rather than new goroutine per stream,
  # 0 for default of new per routine, if > 0, match to cpu core count for most performant
  num_stream_workers: 0
  # define rate limit per second, 0 turns off
  rate_limit_per_second: 0





