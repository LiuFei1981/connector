// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NotifierClient is the client API for Notifier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotifierClient interface {
	Subscribe(ctx context.Context, in *NotificationSubscriber, opts ...grpc.CallOption) (Notifier_SubscribeClient, error)
	Broadcast(ctx context.Context, in *NotificationData, opts ...grpc.CallOption) (*NotificationDone, error)
}

type notifierClient struct {
	cc grpc.ClientConnInterface
}

func NewNotifierClient(cc grpc.ClientConnInterface) NotifierClient {
	return &notifierClient{cc}
}

func (c *notifierClient) Subscribe(ctx context.Context, in *NotificationSubscriber, opts ...grpc.CallOption) (Notifier_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Notifier_serviceDesc.Streams[0], "/notifierserver.Notifier/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &notifierSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Notifier_SubscribeClient interface {
	Recv() (*NotificationData, error)
	grpc.ClientStream
}

type notifierSubscribeClient struct {
	grpc.ClientStream
}

func (x *notifierSubscribeClient) Recv() (*NotificationData, error) {
	m := new(NotificationData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *notifierClient) Broadcast(ctx context.Context, in *NotificationData, opts ...grpc.CallOption) (*NotificationDone, error) {
	out := new(NotificationDone)
	err := c.cc.Invoke(ctx, "/notifierserver.Notifier/Broadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotifierServer is the server API for Notifier service.
// All implementations must embed UnimplementedNotifierServer
// for forward compatibility
type NotifierServer interface {
	Subscribe(*NotificationSubscriber, Notifier_SubscribeServer) error
	Broadcast(context.Context, *NotificationData) (*NotificationDone, error)
	mustEmbedUnimplementedNotifierServer()
}

// UnimplementedNotifierServer must be embedded to have forward compatible implementations.
type UnimplementedNotifierServer struct {
}

func (*UnimplementedNotifierServer) Subscribe(*NotificationSubscriber, Notifier_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedNotifierServer) Broadcast(context.Context, *NotificationData) (*NotificationDone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (*UnimplementedNotifierServer) mustEmbedUnimplementedNotifierServer() {}

func RegisterNotifierServer(s *grpc.Server, srv NotifierServer) {
	s.RegisterService(&_Notifier_serviceDesc, srv)
}

func _Notifier_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NotificationSubscriber)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotifierServer).Subscribe(m, &notifierSubscribeServer{stream})
}

type Notifier_SubscribeServer interface {
	Send(*NotificationData) error
	grpc.ServerStream
}

type notifierSubscribeServer struct {
	grpc.ServerStream
}

func (x *notifierSubscribeServer) Send(m *NotificationData) error {
	return x.ServerStream.SendMsg(m)
}

func _Notifier_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifierServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifierserver.Notifier/Broadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifierServer).Broadcast(ctx, req.(*NotificationData))
	}
	return interceptor(ctx, in, info, handler)
}

var _Notifier_serviceDesc = grpc.ServiceDesc{
	ServiceName: "notifierserver.Notifier",
	HandlerType: (*NotifierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Broadcast",
			Handler:    _Notifier_Broadcast_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Notifier_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "notification.proto",
}
